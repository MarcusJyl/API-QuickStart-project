{"ast":null,"code":"const URL = \"http://localhost:8080/jpareststarter\";\n\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({\n      status: res.status,\n      fullError: res.json()\n    });\n  }\n\n  return res.json();\n}\n\nfunction apiFacade() {\n  const setToken = token => {\n    localStorage.setItem('jwtToken', token);\n  };\n\n  const getToken = () => {\n    return localStorage.getItem('jwtToken');\n  };\n\n  const loggedIn = () => {\n    const loggedIn = getToken() != null;\n    return loggedIn;\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"jwtToken\");\n  };\n\n  const login = (user, password) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: password\n    });\n    return fetch(URL + \"/api/login\", options).then(handleHttpErrors).then(res => {\n      setToken(res.token);\n    });\n  };\n\n  const fetchData = () => {\n    const options = makeOptions(\"GET\", true); //True add's the token\n\n    return fetch(URL + \"/api/info/user\", options).then(handleHttpErrors);\n  };\n\n  const makeOptions = (method, addToken, body) => {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        'Accept': 'application/json'\n      }\n    };\n\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  };\n\n  return {\n    makeOptions,\n    setToken,\n    getToken,\n    loggedIn,\n    login,\n    logout,\n    fetchData\n  };\n}\n\nconst facade = apiFacade();\nexport default facade;","map":{"version":3,"sources":["/Users/Marcus/CPHBUSINESS/3.semester/flow3week2/security_frontend/src/apiFacade.js"],"names":["URL","handleHttpErrors","res","ok","Promise","reject","status","fullError","json","apiFacade","setToken","token","localStorage","setItem","getToken","getItem","loggedIn","logout","removeItem","login","user","password","options","makeOptions","username","fetch","then","fetchData","method","addToken","body","opts","headers","JSON","stringify","facade"],"mappings":"AAAA,MAAMA,GAAG,GAAG,sCAAZ;;AAEA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC9B,MAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,WAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,MAAM,EAAEJ,GAAG,CAACI,MAAd;AAAsBC,MAAAA,SAAS,EAAEL,GAAG,CAACM,IAAJ;AAAjC,KAAf,CAAP;AACD;;AACD,SAAON,GAAG,CAACM,IAAJ,EAAP;AACA;;AAED,SAASC,SAAT,GAAqB;AACjB,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxBC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACD,GAFH;;AAGA,QAAMG,QAAQ,GAAG,MAAM;AACrB,WAAOF,YAAY,CAACG,OAAb,CAAqB,UAArB,CAAP;AACD,GAFD;;AAGA,QAAMC,QAAQ,GAAG,MAAM;AACrB,UAAMA,QAAQ,GAAGF,QAAQ,MAAM,IAA/B;AACA,WAAOE,QAAP;AACD,GAHD;;AAIA,QAAMC,MAAM,GAAG,MAAM;AACnBL,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACD,GAFD;;AAKJ,QAAMC,KAAK,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC9B,UAAMC,OAAO,GAAGC,WAAW,CAAC,MAAD,EAAS,IAAT,EAAc;AAACC,MAAAA,QAAQ,EAAEJ,IAAX;AAAiBC,MAAAA,QAAQ,EAAEA;AAA3B,KAAd,CAA3B;AACA,WAAOI,KAAK,CAACzB,GAAG,GAAG,YAAP,EAAqBsB,OAArB,CAAL,CACJI,IADI,CACCzB,gBADD,EAEJyB,IAFI,CAECxB,GAAG,IAAI;AAACQ,MAAAA,QAAQ,CAACR,GAAG,CAACS,KAAL,CAAR;AAAqB,KAF9B,CAAP;AAGF,GALF;;AAMA,QAAMgB,SAAS,GAAG,MAAM;AACpB,UAAML,OAAO,GAAGC,WAAW,CAAC,KAAD,EAAO,IAAP,CAA3B,CADoB,CACqB;;AAC1C,WAAOE,KAAK,CAACzB,GAAG,GAAG,gBAAP,EAAyBsB,OAAzB,CAAL,CAAuCI,IAAvC,CAA4CzB,gBAA5C,CAAP;AAED,GAJF;;AAKA,QAAMsB,WAAW,GAAE,CAACK,MAAD,EAAQC,QAAR,EAAiBC,IAAjB,KAAyB;AACzC,QAAIC,IAAI,GAAG;AACTH,MAAAA,MAAM,EAAEA,MADC;AAETI,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,kBAAU;AAFH;AAFA,KAAX;;AAOA,QAAIH,QAAQ,IAAIb,QAAQ,EAAxB,EAA4B;AAC1Be,MAAAA,IAAI,CAACC,OAAL,CAAa,gBAAb,IAAiClB,QAAQ,EAAzC;AACD;;AACD,QAAIgB,IAAJ,EAAU;AACRC,MAAAA,IAAI,CAACD,IAAL,GAAYG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAZ;AACD;;AACD,WAAOC,IAAP;AACD,GAfF;;AAgBC,SAAO;AACHR,IAAAA,WADG;AAEHb,IAAAA,QAFG;AAGHI,IAAAA,QAHG;AAIHE,IAAAA,QAJG;AAKHG,IAAAA,KALG;AAMHF,IAAAA,MANG;AAOHU,IAAAA;AAPG,GAAP;AASA;;AACD,MAAMQ,MAAM,GAAG1B,SAAS,EAAxB;AACA,eAAe0B,MAAf","sourcesContent":["const URL = \"http://localhost:8080/jpareststarter\";\n \nfunction handleHttpErrors(res) {\n if (!res.ok) {\n   return Promise.reject({ status: res.status, fullError: res.json() })\n }\n return res.json();\n}\n \nfunction apiFacade() {\n    const setToken = (token) => {\n        localStorage.setItem('jwtToken', token)\n      }\n    const getToken = () => {\n      return localStorage.getItem('jwtToken')\n    }\n    const loggedIn = () => {\n      const loggedIn = getToken() != null;\n      return loggedIn;\n    }\n    const logout = () => {\n      localStorage.removeItem(\"jwtToken\");\n    }\n    \n \nconst login = (user, password) => {\n    const options = makeOptions(\"POST\", true,{username: user, password: password });\n    return fetch(URL + \"/api/login\", options)\n      .then(handleHttpErrors)\n      .then(res => {setToken(res.token) })\n }\nconst fetchData = () => {\n    const options = makeOptions(\"GET\",true); //True add's the token\n   return fetch(URL + \"/api/info/user\", options).then(handleHttpErrors);\n\n }\nconst makeOptions= (method,addToken,body) =>{\n   var opts = {\n     method: method,\n     headers: {\n       \"Content-type\": \"application/json\",\n       'Accept': 'application/json',\n     }\n   }\n   if (addToken && loggedIn()) {\n     opts.headers[\"x-access-token\"] = getToken();\n   }\n   if (body) {\n     opts.body = JSON.stringify(body);\n   }\n   return opts;\n }\n return {\n     makeOptions,\n     setToken,\n     getToken,\n     loggedIn,\n     login,\n     logout,\n     fetchData\n }\n}\nconst facade = apiFacade();\nexport default facade;\n"]},"metadata":{},"sourceType":"module"}